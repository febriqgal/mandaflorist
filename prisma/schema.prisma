// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  password  String
  phone     String
  address   String
  role      Role       @default(USER)
  products  Product[]
  carts     Cart[]
  checkouts Checkout[]
  reviews   Review[]
  createdAt DateTime   @default(now())
  updatedAt DateTime?
}

enum Role {
  USER
  ADMIN
}

model Product {
  id        String    @id @default(cuid())
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String
  title     String
  desc      String    @db.Text
  stock     Int       @default(0)
  price     Int       @default(0)
  discount  Int       @default(0)
  view      Int?      @default(0)
  sold      Int?      @default(0)
  image     String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  Cart      Cart[]
  review    Review[]
}

model Review {
  id        String    @id @default(cuid())
  product   Product   @relation(fields: [productId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  desc      String
  rating    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  productId String
  userId    String
}

model Cart {
  id         String    @id @default(cuid())
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  note       String
  quantity   Int       @default(0)
  total      Int       @default(0)
  products   Product?  @relation(fields: [productId], references: [id])
  Checkout   Checkout? @relation(fields: [checkoutId], references: [id])
  isHidden   Boolean   @default(false)
  checkoutId String?
  productId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
}

model Checkout {
  id             String    @id @default(cuid())
  total          Int       @default(0)
  user           User?     @relation(fields: [userId], references: [id])
  userId         String?
  address        String
  proofOfPayment String
  status         Status    @default(PENDING)
  cart           Cart[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
}

enum Status {
  PENDING
  DELIVERY
  SUCCESS
  CANCEL
}
